{
  // Product sınıfı => Satır 13 => // varsayalım ki yanlışlık yapıp(decimal olanı) int yaptık(manuel)

  // Product sınıfı => Satır 15 => // migration değişikliği için yaptık

  // Initializer sınıfı => Satır 15 => // Appsettings dosyasını okuabilmek için kullandık 



  // Migration komutları:

  // add-migration DOSYA_ADI => migr. klasörü oluşur ve içinde iki tane dosya oluşur
  // snapshot adlı klasör o anlık entity propertylerini burda tutar yani
  // ek migration yapıldığında yeni migration dosyasına ekleip eklenmediğini tutar.
  // -db de bulunan product tablosu ile burda bulunan product entity'sinin senkron olup olmadığını burdan kontrol ederiz.


  // update-database
  // burda bulunan migr. db'ye yansıtmak için kullanılır


  // remove-migrations her zaman son yapılanı(snapshot) siler(db'ye yansıtmadan) ancak değişiklik kalır => KonuNotlar.js de satır 2
  // varsayalım ki yanlışıkla daha da ileri gittik db'ye yansıttık 
  //çözüm => örn update-database UpdatePriceForProduct ile bir öncekine dönüp ardından remove yapılır.


  // Bölüm 4

  // Unchanged => Siz bir listeleme yaptığınızda yani ilk db'den veriyi aldığımızda bu her bir datanın state'ini
  // değişmemiş(Unchanged) yapar (EFCore dbden ilk datayı okuduğunda verir)

  // Detached => EfCore datayı memory'de Track etmediğinde verir.(bu arkadaş daha memoryde değil)


  // ToList() ToListAsync() metotları çağırıldığında tüm datalar EFCore tarafından Track edilir(takip edilir )
  // eğer update delete gibi işlem yapmayacaksam efcore Tracke etmemesini AsNoTracking ile sağlarım
  //  NOT : AsNoTracking()  Sql'den gelen data EFCore tarafından tracke edilmemesini sağlamış oluruz (avantajı memoryde tutulmuyor)
  //


}
